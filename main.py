import gspread
from google.oauth2.service_account import Credentials
from db.schedule_db import ScheduleDB
import telebot
import sqlite3
from datetime import datetime, timedelta, date
import time
import re

table_name = "Netology"
schedule = ScheduleDB()
schedule.createNewGroup(table_name)
schedule.clearData(table_name)
def authenticate_sheets():
    scopes = [
        "https://www.googleapis.com/auth/spreadsheets"
    ]
    creds = Credentials.from_service_account_file("mypython-414513-94cec7c6b257.json", scopes=scopes)
    client = gspread.authorize(creds)
    return client


def read_sheet(client, sheet_id, sheet_name):
    sheet = client.open_by_key(sheet_id)
    worksheet = sheet.worksheet(sheet_name)
    data = worksheet.get_all_values()  # –ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Å—å –ª–∏—Å—Ç —Ü–µ–ª–∏–∫–æ–º, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü—ã
    return data


def get_sheets(client, sheet_id):
    sheet = client.open_by_key(sheet_id)
    worksheets = sheet.worksheets()
    return worksheets


def fill_dates(schedule, start_date):
    current_date = datetime.strptime(start_date, "%d-%m-%Y")
    previous_date = current_date.strftime("%d-%m-%Y")

    for entry in schedule:
        if len(entry) > 0 and entry[0]:  # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è, —ç—Ç–æ –Ω–æ–≤—ã–π –¥–µ–Ω—å
            current_date = current_date + timedelta(days=1)
            entry[0] = current_date.strftime("%d-%m-%Y")
            previous_date = entry[0]
        elif len(entry) > 0:  # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –¥–∞—Ç—É
            entry[0] = previous_date

    return schedule


def process_sheets(sheet_id):
    client = authenticate_sheets()
    worksheets = get_sheets(client, sheet_id)

    date_pattern = re.compile(r'\d{2}-\d{2}-\d{4}')
    monday_sheets = []

    for worksheet in worksheets:
        sheet_name = worksheet.title
        if date_pattern.match(sheet_name):
            sheet_date = datetime.strptime(sheet_name, '%d-%m-%Y')
            if sheet_date.weekday() == 0:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                monday_sheets.append((sheet_date, sheet_name))

    monday_sheets.sort()

    for sheet_date, sheet_name in monday_sheets:
        data = read_sheet(client, sheet_id, sheet_name)
        if data:
            print(f"Data from sheet {sheet_name}:")
            filtered_data = [row for row in data[1:] if any(cell.strip() for cell in row)]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É

            start_date = sheet_name  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –∫–∞–∫ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –¥–∞—Ç—É
            filled_data = fill_dates(filtered_data, start_date)
            for row in filled_data:
                schedule.insertData(table_name, row[0], row[1], row[2], row[3], int(row[4]), row[5], row[6])

        '''if current_date.weekday() == 6:  #–µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—é (6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
            next_monday_date = current_date + timedelta(days=(7 - current_date.weekday())) #–º—ã –≤—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞, 7 - –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
            if sheet_date == next_monday_date: #–µ—Å–ª–∏ –¥–∞—Ç–∞ –ª–∏—Å—Ç–∞ —Ä–∞–≤–Ω–∞ –¥–∞—Ç–µ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞ —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ
                data = read_sheet(client, sheet_id, sheet_name)
                print(data)

                #–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å
                if data:
                    pass'''


'''scopes = [
    "https://www.googleapis.com/auth/spreadsheets"
]


creds = Credentials.from_service_account_file("mypython-414513-94cec7c6b257.json", scopes=scopes)
client = gspread.authorize(creds)

sheet_id = "1MRXzlw20uGOOkX-0zNXOS9zuWvuORoSVk5ouAq05Tls" #—Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É
sheet = client.open_by_key(sheet_id)'''


'''print("Before exec")
print(schedule.getDataByDate(table_name, '15-04-2024'))'''
'''while True:
    values_list = sheet.sheet1.row_values(counter)
    if (values_list == []):
        break
    # self, tableName, date, timeLesson, subjectName, subgroupNumber, teacherName, linkLesson
    schedule.insertData(table_name, values_list[0], values_list[1], values_list[2], int(values_list[3]), values_list[4], values_list[5])
    #print(values_list)
    counter += 1'''

'''print("After exec")
print(schedule.getDataByDate(table_name, '15-04-2024'))'''


# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "6324418773:AAGqLSzRvKJzSbO721xM2CS9O0TL1t5BrBc"

# –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_NAME = "message.db"
DATABASE_SCHEDULE = "schedule.db"

bot = telebot.TeleBot(BOT_TOKEN)

def get_all_user_ids():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT id FROM message")
    user_ids = [row[0] for row in cursor.fetchall()]
    conn.close()
    return user_ids

def get_schedule_scheduleDb(day_of_week):
    conn = sqlite3.connect(DATABASE_SCHEDULE)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Netology WHERE date = ?", (day_of_week,))
    schedule_data = cursor.fetchall()
    conn.close()
    return schedule_data

def send_schedule_to_users():
    days_of_week = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    today = days_of_week[datetime.today().weekday()]

    schedule_data = get_schedule_scheduleDb(today)

    if schedule_data:
        schedule_text = "–ü—Ä–∏–≤–µ—Ç, —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
        for row in schedule_data:
            schedule_text += f"Day: {row[1]}\nTime: {row[2]}\nSubject: {row[3]}\nSubgroup: {row[4]}\nTeacher: {row[5]}\nLink: {row[6]}\n\n"
        for user_id in get_all_user_ids():
            try:
                bot.send_message(user_id, schedule_text)
                print(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except telebot.apihelper.ApiException as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    else:
        print("–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_handler(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! üëã  –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=generate_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /subscribe
@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
def subscribe_handler(message):
    bot.send_message(message.chat.id, "–ö –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å?", reply_markup=telebot.types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, handle_group_response)

def handle_group_response(msg):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    user_id = msg.chat.id
    group_name = msg.text
    cursor.execute("INSERT INTO message (id, name) VALUES (?, ?)", (user_id, group_name))
    conn.commit()
    conn.close()
    bot.send_message(msg.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É! üéâ", reply_markup=generate_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /show_schedule
@bot.message_handler(func=lambda message: message.text == "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def show_schedule_handler(message):
    days_of_week = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    today = days_of_week[datetime.today().weekday()]

    schedule_data = get_schedule_scheduleDb(today)

    if schedule_data:
        schedule_text = "–ü—Ä–∏–≤–µ—Ç, —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
        for row in schedule_data:
            schedule_text += f"–î–µ–Ω—å: {row[1]}\n–í—Ä–µ–º—è: {row[2]}\n–ü—Ä–µ–¥–º–µ—Ç: {row[3]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {row[4]}\n–ì—Ä—É–ø–ø–∞: {row[5]}\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {row[6]}\n–°—Å—ã–ª–∫–∞: {row[7]}\n\n"
        m = schedule_text
        if len(m) > 4095:
            for x in range(0, len(m), 4095):
                bot.reply_to(message, text=m[x:x + 4095])
        else:
            bot.reply_to(message, text=m)
    else:
        bot.send_message(message.chat.id, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. ü§î", reply_markup=generate_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(func=lambda message: message.text == "–ü–æ–º–æ—â—å")
def help_handler(message):
    bot.send_message(message.chat.id, "–Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 —É—Ç—Ä–∞.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π.", reply_markup=generate_menu())

def generate_menu():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    keyboard.row("–ü–æ–º–æ—â—å")
    return keyboard

def schedule_checker():
    while True:
        schedule.run_pending()
        time.sleep(1)


conn = sqlite3.connect("message.db")

# –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É

cursor.execute("CREATE TABLE IF NOT EXISTS message (id INTEGER PRIMARY KEY, name TEXT)")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
conn.commit()

# –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
conn.close()


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏
if __name__ == "__main__":
    generate_menu()
    bot.polling()
    sheet_id = "1MRXzlw20uGOOkX-0zNXOS9zuWvuORoSVk5ouAq05Tls"
    process_sheets(sheet_id)


