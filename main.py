import gspread
from google.oauth2.service_account import Credentials
from db.schedule_db import ScheduleDB
import telebot
import sqlite3
import datetime
import time
from datetime import datetime, date


scopes = [
    "https://www.googleapis.com/auth/spreadsheets"
]

table_name = "Netology"

creds = Credentials.from_service_account_file("mypython-414513-94cec7c6b257.json", scopes=scopes)
client = gspread.authorize(creds)

sheet_id = "1MRXzlw20uGOOkX-0zNXOS9zuWvuORoSVk5ouAq05Tls" #—Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É
sheet = client.open_by_key(sheet_id)

counter = 2 #—Å—á–µ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã
schedule = ScheduleDB()
schedule.createNewGroup(table_name)

'''print("Before exec")
print(schedule.getDataByDate(table_name, '15-04-2024'))'''
schedule.clearData(table_name)
while True:
    values_list = sheet.sheet1.row_values(counter)
    if (values_list == []):
        break
    # self, tableName, date, timeLesson, subjectName, subgroupNumber, teacherName, linkLesson
    schedule.insertData(table_name, values_list[0], values_list[1], values_list[2], int(values_list[3]), values_list[4], values_list[5])
    #print(values_list)
    counter += 1

'''print("After exec")
print(schedule.getDataByDate(table_name, '15-04-2024'))'''


# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "6324418773:AAGqLSzRvKJzSbO721xM2CS9O0TL1t5BrBc"

# –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_NAME = "message.db"
DATABASE_SCHEDULE = "schedule.db"

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_schedule_message():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM message")
    schedule_data = cursor.fetchall()
    conn.close()
    return schedule_data

def get_schedule_scheduleDb():
    conn = sqlite3.connect(DATABASE_SCHEDULE)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM Netology")
    schedule_data1 = cursor.fetchall()
    conn.close()
    return schedule_data1

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
def send_schedule_to_users(schedule_data,schedule_data1):
    message = f"Hello! Here is your schedule for today:\n"

    for row in schedule_data:
        id = row[0]
        try:
            bot.send_message(id, message)
            print(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {id}")
        except telebot.apihelper.ApiException as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
def schedule_task():
    while True:
        now = datetime.datetime.now()
        if now.hour == 12 and now.minute == 23:  # –ò–∑–º–µ–Ω–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –Ω—É–∂–Ω–æ–µ
            schedule_data = get_schedule_message()
            send_schedule_to_users(schedule_data)
            print("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_handler(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! üëã  –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=generate_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /subscribe
@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
def subscribe_handler(message):
    bot.send_message(message.chat.id, "–ö –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å?", reply_markup=telebot.types.ReplyKeyboardRemove())

    @bot.message_handler(func=lambda m: m.chat.id == message.chat.id)
    def handle_group_response(msg):
        with sqlite3.connect(DATABASE_NAME) as conn:
            cursor = conn.cursor()
            cursor.execute("INSERT INTO message (id, name) VALUES (?, ?)", (msg.chat.id, msg.text))
        bot.send_message(msg.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É! üéâ", reply_markup=generate_menu())

'''@bot.message_handler(func=lambda message: message.text == "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É")
def subscribe_handler(message):
    # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ –≥—Ä—É–ø–ø–µ
    bot.send_message(message.chat.id, "–ö –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å?", reply_markup=telebot.types.ReplyKeyboardRemove())

    # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞
    @bot.message_handler(func=lambda m: m.chat.id == message.chat.id)
    def handle_group_response(msg):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        id = msg.chat.id
        name = msg.text
        cursor.execute("INSERT INTO message (id, name) VALUES (?, ?)", (id, name))
        conn.commit()
        conn.close()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
        bot.send_message(msg.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É! üéâ", reply_markup=generate_menu())'''

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /show_schedule
@bot.message_handler(func=lambda message: message.text == "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def show_schedule_handler(message):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    today = date.today()

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    schedule_data = get_schedule_scheduleDb()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã
    schedule_for_today = []
    for row in schedule_data:
        schedule_date = datetime.strptime(row[1], '%d-%m-%Y').date()
        if schedule_date == today:
            schedule_for_today.append(row)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if schedule_for_today:
        schedule_text = "–ü—Ä–∏–≤–µ—Ç, —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
        for row in schedule_for_today:
            schedule_text += f"Date: {row[1]}\n"
            schedule_text += f"Time: {row[2]}\n"
            schedule_text += f"Subject: {row[3]}\n"
            schedule_text += f"Subgroup: {row[4]}\n"
            schedule_text += f"Teacher: {row[5]}\n"
            schedule_text += f"Link: {row[6]}\n\n"
        m = schedule_text
        if len(m) > 4095:
            for x in range(0, len(m), 4095):
                bot.reply_to(message, text=m[x:x + 4095])
        else:
            bot.reply_to(message, text=m)
    else:
        bot.send_message(message.chat.id, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. ü§î", reply_markup=generate_menu())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(func=lambda message: message.text == "–ü–æ–º–æ—â—å")
def help_handler(message):
    bot.send_message(message.chat.id, "–Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7:00 —É—Ç—Ä–∞.\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π.", reply_markup=generate_menu())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def generate_menu():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    keyboard.row("–ü–æ–º–æ—â—å")
    return keyboard

conn = sqlite3.connect("message.db")

# –°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É

cursor.execute("CREATE TABLE IF NOT EXISTS message (id INTEGER PRIMARY KEY, name TEXT)")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
conn.commit()

# –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
conn.close()


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏
if __name__ == "__main__":
    generate_menu()
    bot.polling()

