import telebot
import sqlite3
from db.schedule_db import ScheduleDB
from datetime import datetime, date

table_name = "Netology"
schedule = ScheduleDB()
schedule.createNewGroup(table_name)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = "6324418773:AAEIWge54hrrxGvRnJepfgLC4y7u_A7Me_A"

DATABASE_NAME = "message.db"
DATABASE_SCHEDULE = "schedule.db"

bot = telebot.TeleBot(BOT_TOKEN)


def get_all_user_ids():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT id FROM message")
    user_ids = [row[0] for row in cursor.fetchall()]
    conn.close()
    return user_ids

def get_schedule_scheduleDb(date, groupId):
    conn = sqlite3.connect(DATABASE_SCHEDULE)
    cursor = conn.cursor()
    date_string = date.strftime('%d-%m-%Y')
    cursor.execute("SELECT * FROM Netology WHERE date = ? AND subgroup_number = ?", (date_string, groupId))
    schedule_data = cursor.fetchall()
    conn.close()
    return schedule_data

@bot.message_handler(commands=['start'])
def start_handler(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–±–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.", reply_markup=generate_initial_menu())

@bot.message_handler(func=lambda message: message.text == "–£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã")
def subscribe_handler(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã.", reply_markup=telebot.types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, handle_group_response)
@bot.message_handler(func=lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã")
def change_group_handler(message):
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã.", reply_markup=telebot.types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, handle_group_response)

def handle_group_response(msg):
    user_id = msg.chat.id
    group_name = msg.text
    if not group_name.isdigit() or len(group_name) > 2:
        bot.send_message(user_id, "–û—à–∏–±–∫–∞: –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (–Ω–µ –±–æ–ª–µ–µ 2 —á–∏—Å–µ–ª).", reply_markup=generate_initial_menu())
        return

    insert_or_update_user(user_id, group_name)
    bot.send_message(user_id, "–í—ã —É—Å–ø–µ—à–Ω–æ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã! üéâ", reply_markup=generate_main_menu())

@bot.message_handler(func=lambda message: message.text == "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
def show_schedule_handler(message):
    conn_message = sqlite3.connect(DATABASE_NAME)
    cursor_message = conn_message.cursor()
    cursor_message.execute("SELECT name FROM message WHERE id = ?", (message.chat.id,))
    result = cursor_message.fetchone()
    if not result:
        bot.send_message(message.chat.id, "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.", reply_markup=generate_initial_menu())
        return

    group_name = result[0]
    today = date.today()
    schedule_data = get_schedule_scheduleDb(today, group_name)

    if schedule_data:
        schedule_text = f"–ü—Ä–∏–≤–µ—Ç, —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name}:\n"
        for row in schedule_data:
            schedule_text += f"–î–µ–Ω—å: {row[1]}\n–í—Ä–µ–º—è: {row[2]}\n–ü—Ä–µ–¥–º–µ—Ç: {row[3]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {row[4]}\n–ì—Ä—É–ø–ø–∞: {row[5]}\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {row[6]}\n–°—Å—ã–ª–∫–∞: {row[7]}\n\n"
        m = schedule_text
        if len(m) > 4095:
            for x in range(0, len(m), 4095):
                bot.send_message(message.chat.id, text=m[x:x + 4095])
        else:
            bot.send_message(message.chat.id, text=m)
    else:
        bot.send_message(message.chat.id, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. ü§î", reply_markup=generate_main_menu())

@bot.message_handler(func=lambda message: message.text == "–ü–æ–º–æ—â—å")
def help_handler(message):
    bot.send_message(message.chat.id, "–Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 —É—Ç—Ä–∞.\n\n–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π.", reply_markup=generate_main_menu())

@bot.message_handler(func=lambda message: message.text == "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
def unsubscribe_handler(message):
    user_id = message.chat.id
    delete_user(user_id)
    bot.send_message(user_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏. üò¢", reply_markup=generate_initial_menu())

def generate_initial_menu():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("–£–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã")
    return keyboard

def generate_main_menu():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    keyboard.row("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã", "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
    keyboard.row("–ü–æ–º–æ—â—å")
    return keyboard

conn = sqlite3.connect(DATABASE_NAME)
cursor = conn.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS message (id INTEGER PRIMARY KEY, name TEXT)")
conn.commit()
conn.close()

def insert_or_update_user(chat_id, group_name):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO message (id, name) VALUES (?, ?)", (chat_id, group_name))
    conn.commit()
    conn.close()
def delete_user(chat_id):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM message WHERE id = ?", (chat_id,))
    conn.commit()
    conn.close()

def insert_or_update_user(chat_id, group_name):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO message (id, name) VALUES (?, ?)", (chat_id, group_name))
    conn.commit()
    conn.close()

# def check_new_subscriptions():
#     conn = sqlite3.connect(DATABASE_NAME)
#     cursor = conn.cursor()
#     cursor.execute("SELECT id, name FROM message")
#     users = cursor.fetchall()
#     conn.close()
#
#     today = date.today()
#
#     schedule_data = get_schedule_scheduleDb(today)
#
#     for user_id, group_name in users:
#         send_schedule_notification(user_id, group_name, schedule_data)
#
#     threading.Timer(300, check_new_subscriptions).start()
#
# check_new_subscriptions()

bot.polling()


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏
if __name__ == "__main__":
    bot.polling()